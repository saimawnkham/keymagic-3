import { Colors } from "../theme/colors.slint";
import { Fonts } from "../theme/fonts.slint";
import { Styles } from "../theme/styles.slint";
import { LineEdit, CheckBox } from "std-widgets.slint";

export component HotkeyInput inherits Rectangle {
    in property <string> initial-hotkey: "";
    in property <bool> initial-ctrl: false;
    in property <bool> initial-alt: false;
    in property <bool> initial-shift: false;
    in property <string> initial-key: "";
    
    in-out property <string> hotkey: {
        // Build hotkey string declaratively
        if (ctrl-checked && alt-checked && shift-checked && key-text != "") {
            "Ctrl+Alt+Shift+" + key-text
        } else if (ctrl-checked && alt-checked && key-text != "") {
            "Ctrl+Alt+" + key-text
        } else if (ctrl-checked && shift-checked && key-text != "") {
            "Ctrl+Shift+" + key-text
        } else if (alt-checked && shift-checked && key-text != "") {
            "Alt+Shift+" + key-text
        } else if (ctrl-checked && key-text != "") {
            "Ctrl+" + key-text
        } else if (alt-checked && key-text != "") {
            "Alt+" + key-text
        } else if (shift-checked && key-text != "") {
            "Shift+" + key-text
        } else {
            ""
        }
    }
    in-out property <bool> ctrl-checked: initial-ctrl;
    in-out property <bool> alt-checked: initial-alt;
    in-out property <bool> shift-checked: initial-shift;
    in-out property <string> key-text: initial-key;
    in-out property <bool> valid: {
        // Valid if at least two modifiers, or one modifier + a key
        if (ctrl-checked && alt-checked && shift-checked) {
            true  // 3 modifiers
        } else if ((ctrl-checked && alt-checked) || (ctrl-checked && shift-checked) || (alt-checked && shift-checked)) {
            true  // 2 modifiers
        } else if ((ctrl-checked || alt-checked || shift-checked) && key-text != "") {
            true  // 1 modifier + key
        } else {
            false
        }
    }
    
    callback hotkey-changed(string);
    
    background: Colors.surface;
    border-radius: Styles.radius-md;
    border-width: 1px;
    border-color: Colors.border;
    padding: Styles.spacing-md;
    min-height: 48px;
    
    VerticalLayout {
        alignment: center;
        
        HorizontalLayout {
            spacing: Styles.spacing-sm;
            alignment: center;
        
            // Ctrl button
            TouchArea {
                width: 50px;
                height: 32px;
                
                clicked => {
                    root.ctrl-checked = !root.ctrl-checked;
                    root.hotkey-changed(root.hotkey);
                }
                
                Rectangle {
                    width: parent.width;
                    height: parent.height;
                    background: root.ctrl-checked ? Colors.primary : Colors.background;
                    border-radius: Styles.radius-sm;
                    border-width: 1px;
                    border-color: root.ctrl-checked ? Colors.primary : Colors.border;
                    
                    Text {
                        text: "Ctrl";
                        font-size: Fonts.size-sm;
                        font-weight: root.ctrl-checked ? Fonts.weight-medium : Fonts.weight-normal;
                        color: root.ctrl-checked ? Colors.text-on-primary : Colors.text-primary;
                        horizontal-alignment: center;
                        vertical-alignment: center;
                    }
                }
            }
                
            // Alt button
            TouchArea {
                width: 50px;
                height: 32px;
                
                clicked => {
                    root.alt-checked = !root.alt-checked;
                    root.hotkey-changed(root.hotkey);
                }
                
                Rectangle {
                    width: parent.width;
                    height: parent.height;
                    background: root.alt-checked ? Colors.primary : Colors.background;
                    border-radius: Styles.radius-sm;
                    border-width: 1px;
                    border-color: root.alt-checked ? Colors.primary : Colors.border;
                    
                    Text {
                        text: "Alt";
                        font-size: Fonts.size-sm;
                        font-weight: root.alt-checked ? Fonts.weight-medium : Fonts.weight-normal;
                        color: root.alt-checked ? Colors.text-on-primary : Colors.text-primary;
                        horizontal-alignment: center;
                        vertical-alignment: center;
                    }
                }
            }
                
            // Shift button
            TouchArea {
                width: 50px;
                height: 32px;
                
                clicked => {
                    root.shift-checked = !root.shift-checked;
                    root.hotkey-changed(root.hotkey);
                }
                
                Rectangle {
                    width: parent.width;
                    height: parent.height;
                    background: root.shift-checked ? Colors.primary : Colors.background;
                    border-radius: Styles.radius-sm;
                    border-width: 1px;
                    border-color: root.shift-checked ? Colors.primary : Colors.border;
                    
                    Text {
                        text: "Shift";
                        font-size: Fonts.size-sm;
                        font-weight: root.shift-checked ? Fonts.weight-medium : Fonts.weight-normal;
                        color: root.shift-checked ? Colors.text-on-primary : Colors.text-primary;
                        horizontal-alignment: center;
                        vertical-alignment: center;
                    }
                }
            }
            
            // Plus sign
            Text {
                text: "+";
                font-size: Fonts.size-base;
                color: Colors.text-secondary;
                horizontal-alignment: center;
                vertical-alignment: center;
            }
            
            // Key input
            Rectangle {
                width: 50px;
                height: 32px;
                background: Colors.background;
                border-radius: Styles.radius-sm;
                border-width: 1px;
                border-color: Colors.border;
                
                LineEdit {
                    width: 100%;
                    height: 100%;
                    placeholder-text: "Key";
                    text <=> root.key-text;
                    horizontal-alignment: center;
                    font-size: Fonts.size-sm;
                    
                    edited => {
                        root.key-text = self.text;
                        root.hotkey-changed(root.hotkey);
                    }
                    
                    accepted => {
                        root.hotkey-changed(root.hotkey);
                    }
                }
            }
            
            // Valid indicator
            Rectangle {
                width: 70px;
                height: 32px;
                background: root.valid ? Colors.primary-light : Colors.background;
                border-radius: Styles.radius-sm;
                border-width: 1px;
                border-color: root.valid ? Colors.primary : Colors.border;
                
                Text {
                    text: root.valid ? "âœ“ Valid" : "Invalid";
                    color: root.valid ? Colors.text-on-primary : Colors.text-disabled;
                    font-size: Fonts.size-sm;
                    font-weight: Fonts.weight-medium;
                    horizontal-alignment: center;
                    vertical-alignment: center;
                }
            }
        }
    }
}